// Code generated by goyacc - DO NOT EDIT.

// Copyright 2017 The WL Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package wl

import __yyfmt__ "fmt"

type yySymType struct {
	yys   int
	Node  Node
	Token Token
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57375
	yyEofCode   = 57344
	AND         = 57346
	APPLY       = 57347
	CONDITION   = 57348
	EQUAL       = 57349
	FLOAT       = 57350
	GEQ         = 57351
	IDENT       = 57352
	INT         = 57353
	LEQ         = 57354
	LPART       = 57355
	MAP         = 57356
	MESSAGE     = 57357
	NOPATTERN   = 57358
	NOT         = 57359
	OR          = 57360
	PATTERN     = 57361
	POSTFIX     = 57362
	REPLACEALL  = 57363
	REPLACEREP  = 57364
	RPART       = 57365
	RULE        = 57366
	RULEDELAYED = 57367
	SAME        = 57368
	SET_DELAYED = 57369
	SLOT        = 57370
	STRING      = 57371
	STRINGJOIN  = 57372
	UNARYMINUS  = 57373
	UNSAME      = 57374
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -62
)

var (
	yyFollow = [][]int{
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381, 57382}, // state 0
		{57344}, // state 1
		{57344, 42, 43, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 94, 124, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57366, 57367, 57368, 57369, 57372, 57374},                                                                                                             // state 2
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                                    // state 3
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                                    // state 4
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                                     // state 5
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374},               // state 6
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                                    // state 7
		{33, 40, 45, 123, 125, 57377, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                        // state 8
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57357, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374},        // state 9
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374},               // state 10
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374},               // state 11
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374},               // state 12
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374},               // state 13
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57379, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57381, 57374}, // state 14
		{33, 40, 45, 123, 57377, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                             // state 15
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374},               // state 16
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374},               // state 17
		{33, 40, 45, 93, 123, 57377, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                         // state 18
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                                     // state 19
		{42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                                                // state 20
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374},               // state 21
		{44, 93, 57376}, // state 22
		{93},            // state 23
		{33, 40, 45, 93, 123, 125, 57378, 57350, 57379, 57352, 57353, 57361, 57365, 57370, 57371, 57381},                                                                                                                                                                                            // state 24
		{42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                                        // state 25
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 26
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 27
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 28
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 29
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 30
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 31
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 32
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 33
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 34
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 35
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 36
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 37
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 38
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 39
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 40
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 41
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 42
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 43
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 44
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 45
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 46
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 47
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 48
		{57344, 33, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57378, 57350, 57379, 57351, 57352, 57353, 57354, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57381, 57374}, // state 49
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 50
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 51
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 52
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 53
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 54
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 55
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                            // state 56
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 57
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 58
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 59
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 60
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 61
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 62
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 63
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 64
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 65
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 66
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 67
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 68
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 69
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 70
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 71
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 72
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 73
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 74
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 75
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 76
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 77
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 78
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 79
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 80
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 81
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 82
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 83
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 84
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 85
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 86
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                             // state 87
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374},       // state 88
		{44, 57376, 57365}, // state 89
		{57365},            // state 90
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374}, // state 91
		{57352, 57371, 57380}, // state 92
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57357, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374}, // state 93
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57357, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374}, // state 94
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57357, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374}, // state 95
		{57352, 57371, 57380}, // state 96
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374}, // state 97
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374}, // state 98
		{44, 125, 57376}, // state 99
		{125},            // state 100
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374}, // state 101
		{41, 42, 43, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 94, 124, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57366, 57367, 57368, 57369, 57372, 57374},                                                                                                  // state 102
		{57344, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 123, 124, 125, 57346, 57347, 57348, 57349, 57350, 57351, 57352, 57353, 57354, 57355, 57356, 57360, 57361, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57370, 57371, 57372, 57374}, // state 103
		{33, 40, 45, 123, 57378, 57350, 57379, 57352, 57353, 57361, 57370, 57371, 57381},                                                                                                                                                                                                      // state 104
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                       // state 105
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                       // state 106
		{57344, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 93, 94, 124, 125, 57346, 57347, 57348, 57349, 57351, 57354, 57356, 57360, 57362, 57363, 57364, 57365, 57366, 57367, 57368, 57369, 57372, 57374},                                                                       // state 107
	}

	yyXLAT = map[int]int{
		45:    0,  // '-' (99x)
		93:    1,  // ']' (62x)
		125:   2,  // '}' (62x)
		44:    3,  // ',' (61x)
		57352: 4,  // IDENT (61x)
		57365: 5,  // RPART (61x)
		57371: 6,  // STRING (61x)
		42:    7,  // '*' (60x)
		43:    8,  // '+' (60x)
		46:    9,  // '.' (60x)
		47:    10, // '/' (60x)
		58:    11, // ':' (60x)
		59:    12, // ';' (60x)
		60:    13, // '<' (60x)
		61:    14, // '=' (60x)
		62:    15, // '>' (60x)
		63:    16, // '?' (60x)
		64:    17, // '@' (60x)
		94:    18, // '^' (60x)
		124:   19, // '|' (60x)
		57346: 20, // AND (60x)
		57347: 21, // APPLY (60x)
		57348: 22, // CONDITION (60x)
		57349: 23, // EQUAL (60x)
		57351: 24, // GEQ (60x)
		57354: 25, // LEQ (60x)
		57356: 26, // MAP (60x)
		57360: 27, // OR (60x)
		57362: 28, // POSTFIX (60x)
		57363: 29, // REPLACEALL (60x)
		57364: 30, // REPLACEREP (60x)
		57366: 31, // RULE (60x)
		57367: 32, // RULEDELAYED (60x)
		57368: 33, // SAME (60x)
		57369: 34, // SET_DELAYED (60x)
		57372: 35, // STRINGJOIN (60x)
		57374: 36, // UNSAME (60x)
		33:    37, // '!' (59x)
		40:    38, // '(' (59x)
		123:   39, // '{' (59x)
		57350: 40, // FLOAT (59x)
		57353: 41, // INT (59x)
		57361: 42, // PATTERN (59x)
		57370: 43, // SLOT (59x)
		57344: 44, // $end (58x)
		41:    45, // ')' (57x)
		57379: 46, // Factor (41x)
		57381: 47, // Term (41x)
		57378: 48, // Expression (40x)
		38:    49, // '&' (19x)
		91:    50, // '[' (19x)
		57355: 51, // LPART (19x)
		57357: 52, // MESSAGE (4x)
		57376: 53, // CommaOpt (3x)
		57377: 54, // ExprList (3x)
		57380: 55, // Tag (2x)
		57382: 56, // start (1x)
		57375: 57, // $default (0x)
		57345: 58, // error (0x)
		57358: 59, // NOPATTERN (0x)
		57359: 60, // NOT (0x)
		57373: 61, // UNARYMINUS (0x)
	}

	yySymNames = []string{
		"'-'",
		"']'",
		"'}'",
		"','",
		"IDENT",
		"RPART",
		"STRING",
		"'*'",
		"'+'",
		"'.'",
		"'/'",
		"':'",
		"';'",
		"'<'",
		"'='",
		"'>'",
		"'?'",
		"'@'",
		"'^'",
		"'|'",
		"AND",
		"APPLY",
		"CONDITION",
		"EQUAL",
		"GEQ",
		"LEQ",
		"MAP",
		"OR",
		"POSTFIX",
		"REPLACEALL",
		"REPLACEREP",
		"RULE",
		"RULEDELAYED",
		"SAME",
		"SET_DELAYED",
		"STRINGJOIN",
		"UNSAME",
		"'!'",
		"'('",
		"'{'",
		"FLOAT",
		"INT",
		"PATTERN",
		"SLOT",
		"$end",
		"')'",
		"Factor",
		"Term",
		"Expression",
		"'&'",
		"'['",
		"LPART",
		"MESSAGE",
		"CommaOpt",
		"ExprList",
		"Tag",
		"start",
		"$default",
		"error",
		"NOPATTERN",
		"NOT",
		"UNARYMINUS",
	}

	yyTokenLiteralStrings = map[int]string{
		57352: "identifier",
		57365: "]]",
		57371: "string literal",
		57346: "&&",
		57347: "@@",
		57348: "/;",
		57349: "==",
		57351: ">=",
		57354: "<=",
		57356: "/@",
		57360: "||",
		57362: "//",
		57363: "/.",
		57364: "//.",
		57366: "->",
		57367: ":>",
		57368: "===",
		57369: ":=",
		57372: "<>",
		57374: "=!=",
		57350: "floating point literal",
		57353: "integer literal",
		57361: "pattern",
		57370: "slot",
		57355: "[[",
		57357: "::",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {56, 1},
		2:  {48, 2},
		3:  {48, 2},
		4:  {48, 3},
		5:  {48, 3},
		6:  {48, 3},
		7:  {48, 3},
		8:  {48, 3},
		9:  {48, 3},
		10: {48, 3},
		11: {48, 3},
		12: {48, 3},
		13: {48, 3},
		14: {48, 3},
		15: {48, 3},
		16: {48, 3},
		17: {48, 3},
		18: {48, 3},
		19: {48, 3},
		20: {48, 3},
		21: {48, 3},
		22: {48, 3},
		23: {48, 3},
		24: {48, 3},
		25: {48, 3},
		26: {48, 3},
		27: {48, 2},
		28: {48, 3},
		29: {48, 3},
		30: {48, 3},
		31: {48, 3},
		32: {48, 3},
		33: {48, 3},
		34: {48, 3},
		35: {48, 3},
		36: {48, 1},
		37: {48, 3},
		38: {47, 1},
		39: {47, 3},
		40: {47, 2},
		41: {47, 4},
		42: {47, 1},
		43: {47, 3},
		44: {47, 5},
		45: {47, 1},
		46: {47, 1},
		47: {47, 1},
		48: {47, 1},
		49: {47, 5},
		50: {47, 2},
		51: {47, 2},
		52: {47, 3},
		53: {47, 5},
		54: {46, 1},
		55: {46, 2},
		56: {54, 1},
		57: {54, 3},
		58: {53, 0},
		59: {53, 1},
		60: {55, 1},
		61: {55, 1},
	}

	yyXErrors = map[yyXError]string{
		yyXError{0, 44}:   "invalid empty input",
		yyXError{1, -1}:   "expected $end",
		yyXError{23, -1}:  "expected ']'",
		yyXError{100, -1}: "expected '}'",
		yyXError{22, -1}:  "expected CommaOpt or one of [',', ']']",
		yyXError{99, -1}:  "expected CommaOpt or one of [',', '}']",
		yyXError{89, -1}:  "expected CommaOpt or one of [',', ]]]",
		yyXError{18, -1}:  "expected ExprList or one of ['!', '(', '-', ']', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{8, -1}:   "expected ExprList or one of ['!', '(', '-', '{', '}', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{15, -1}:  "expected ExprList or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{49, -1}:  "expected Expression or one of [$end, &&, '!', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{24, -1}:  "expected Expression or one of ['!', '(', '-', ']', '{', '}', ]], floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{3, -1}:   "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{4, -1}:   "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{7, -1}:   "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{26, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{27, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{28, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{29, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{30, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{31, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{32, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{33, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{34, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{35, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{36, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{37, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{38, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{39, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{40, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{41, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{42, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{43, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{44, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{45, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{46, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{47, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{48, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{50, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{51, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{52, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{53, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{54, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{55, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{56, -1}:  "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{104, -1}: "expected Expression or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
		yyXError{14, -1}:  "expected Factor or one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{92, -1}:  "expected Tag or one of [identifier, string literal]",
		yyXError{96, -1}:  "expected Tag or one of [identifier, string literal]",
		yyXError{90, -1}:  "expected ]]",
		yyXError{9, -1}:   "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, ::, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{93, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, ::, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{94, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, ::, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{95, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, ::, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{6, -1}:   "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{10, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{11, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{12, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{13, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{16, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{17, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{21, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{88, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{91, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{97, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{98, -1}:  "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{101, -1}: "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{103, -1}: "expected one of [$end, &&, '!', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '{', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, [[, ]], floating point literal, identifier, integer literal, pattern, slot, string literal, ||]",
		yyXError{5, -1}:   "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{19, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{57, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{58, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{59, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{60, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{61, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{62, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{63, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{64, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{65, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{66, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{67, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{68, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{69, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{70, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{71, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{72, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{73, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{74, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{75, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{76, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{77, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{78, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{79, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{80, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{81, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{82, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{83, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{84, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{85, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{86, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{87, -1}:  "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{105, -1}: "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{106, -1}: "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{107, -1}: "expected one of [$end, &&, ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{2, -1}:   "expected one of [$end, &&, '*', '+', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '^', '|', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ||]",
		yyXError{102, -1}: "expected one of [&&, ')', '*', '+', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '^', '|', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ||]",
		yyXError{20, -1}:  "expected one of [&&, '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{25, -1}:  "expected one of [&&, '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', ']', '^', '|', '}', ->, /., //, //., /;, /@, :=, :>, <=, <>, =!=, ==, ===, >=, @@, ]], ||]",
		yyXError{0, -1}:   "expected start or one of ['!', '(', '-', '{', floating point literal, identifier, integer literal, pattern, slot, string literal]",
	}

	yyParseTab = [108][]uint16{
		// 0
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 64, 56: 63},
		{44: 62},
		{107, 7: 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 88, 103, 93, 100, 102, 97, 94, 104, 91, 90, 92, 89, 96, 101, 95, 98, 99, 44: 61},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 169},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 168},
		// 5
		{26, 26, 26, 26, 5: 26, 7: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 44: 26, 26},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 49: 24, 24, 24},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 164},
		{66, 2: 160, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 82, 54: 161},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 49: 20, 20, 20, 154},
		// 10
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 49: 17, 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 49: 16, 16, 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 49: 15, 15, 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 49: 14, 14, 14},
		{8, 8, 8, 8, 71, 8, 75, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 78, 69, 70, 68, 72, 73, 74, 8, 8, 81, 76, 49: 79, 80, 77},
		// 15
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 82, 54: 151},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 49: 12, 12, 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 49: 11, 11, 11},
		{66, 83, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 82, 54: 84},
		{7, 7, 7, 7, 5: 7, 7: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 44: 7, 7},
		// 20
		{107, 6, 6, 6, 5: 6, 7: 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 88, 103, 93, 100, 102, 97, 94, 104, 91, 90, 92, 89, 96, 101, 95, 98, 99},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 49: 10, 10, 10},
		{1: 4, 3: 86, 53: 85},
		{1: 150},
		{66, 3, 3, 4: 71, 3, 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 87},
		// 25
		{107, 5, 5, 5, 5: 5, 7: 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 88, 103, 93, 100, 102, 97, 94, 104, 91, 90, 92, 89, 96, 101, 95, 98, 99},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 149},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 148},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 147},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 146},
		// 30
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 145},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 144},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 143},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 142},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 141},
		// 35
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 140},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 139},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 138},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 137},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 136},
		// 40
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 135},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 134},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 133},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 132},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 131},
		// 45
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 130},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 129},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 128},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 127},
		{66, 35, 35, 35, 71, 35, 75, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 65, 69, 70, 68, 72, 73, 74, 35, 35, 67, 76, 126},
		// 50
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 125},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 124},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 123},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 122},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 121},
		// 55
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 120},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 119},
		{107, 27, 27, 27, 5: 27, 7: 105, 106, 108, 109, 27, 27, 112, 27, 114, 115, 116, 117, 27, 88, 103, 27, 100, 102, 97, 94, 104, 91, 27, 27, 27, 27, 101, 27, 98, 99, 44: 27, 27},
		{28, 28, 28, 28, 5: 28, 7: 28, 28, 28, 28, 28, 28, 28, 28, 28, 115, 116, 117, 28, 28, 103, 28, 28, 28, 28, 94, 28, 91, 28, 28, 28, 28, 28, 28, 98, 28, 44: 28, 28},
		{29, 29, 29, 29, 5: 29, 7: 29, 29, 29, 29, 29, 29, 29, 29, 29, 115, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 44: 29, 29},
		// 60
		{30, 30, 30, 30, 5: 30, 7: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 44: 30, 30},
		{107, 31, 31, 31, 5: 31, 7: 105, 106, 108, 109, 31, 31, 31, 31, 31, 115, 116, 117, 31, 31, 103, 31, 100, 31, 31, 94, 31, 91, 31, 31, 31, 31, 31, 31, 98, 31, 44: 31, 31},
		{107, 32, 32, 32, 5: 32, 7: 105, 106, 108, 109, 110, 32, 112, 32, 114, 115, 116, 117, 118, 88, 103, 93, 100, 102, 97, 94, 104, 91, 90, 92, 89, 96, 101, 32, 98, 99, 44: 32, 32},
		{107, 33, 33, 33, 5: 33, 7: 105, 106, 108, 109, 33, 33, 33, 33, 114, 115, 116, 117, 33, 33, 103, 33, 100, 102, 33, 94, 33, 91, 33, 33, 33, 33, 33, 33, 98, 33, 44: 33, 33},
		{107, 34, 34, 34, 5: 34, 7: 105, 106, 108, 109, 110, 34, 112, 113, 114, 115, 116, 117, 118, 88, 103, 93, 100, 102, 97, 94, 104, 91, 90, 92, 89, 96, 101, 95, 98, 99, 44: 34, 34},
		// 65
		{107, 36, 36, 36, 5: 36, 7: 105, 106, 108, 109, 36, 36, 112, 36, 114, 115, 116, 117, 118, 88, 103, 93, 100, 102, 97, 94, 104, 91, 90, 92, 89, 96, 101, 36, 98, 99, 44: 36, 36},
		{37, 37, 37, 37, 5: 37, 7: 37, 37, 108, 37, 37, 37, 37, 37, 37, 115, 116, 117, 37, 37, 103, 37, 37, 37, 37, 94, 37, 91, 37, 37, 37, 37, 37, 37, 98, 37, 44: 37, 37},
		{38, 38, 38, 38, 5: 38, 7: 38, 38, 38, 38, 38, 38, 38, 38, 38, 115, 116, 117, 38, 38, 103, 38, 38, 38, 38, 94, 38, 91, 38, 38, 38, 38, 38, 38, 98, 38, 44: 38, 38},
		{39, 39, 39, 39, 5: 39, 7: 105, 106, 108, 109, 39, 39, 39, 39, 39, 115, 116, 117, 39, 39, 103, 39, 39, 39, 39, 94, 39, 91, 39, 39, 39, 39, 39, 39, 98, 39, 44: 39, 39},
		{40, 40, 40, 40, 5: 40, 7: 105, 40, 108, 109, 40, 40, 40, 40, 40, 115, 116, 117, 40, 40, 103, 40, 40, 40, 40, 94, 40, 91, 40, 40, 40, 40, 40, 40, 98, 40, 44: 40, 40},
		// 70
		{41, 41, 41, 41, 5: 41, 7: 41, 41, 108, 109, 41, 41, 41, 41, 41, 115, 116, 117, 41, 41, 103, 41, 41, 41, 41, 94, 41, 91, 41, 41, 41, 41, 41, 41, 98, 41, 44: 41, 41},
		{107, 42, 42, 42, 5: 42, 7: 105, 106, 108, 109, 42, 42, 112, 42, 114, 115, 116, 117, 42, 88, 103, 42, 100, 102, 97, 94, 42, 91, 42, 42, 42, 42, 101, 42, 98, 99, 44: 42, 42},
		{43, 43, 43, 43, 5: 43, 7: 43, 43, 43, 43, 43, 43, 43, 43, 43, 115, 116, 43, 43, 43, 43, 43, 43, 43, 43, 94, 43, 91, 43, 43, 43, 43, 43, 43, 43, 43, 44: 43, 43},
		{107, 44, 44, 44, 5: 44, 7: 105, 106, 108, 109, 44, 44, 44, 44, 114, 115, 116, 117, 44, 44, 103, 44, 100, 44, 44, 94, 44, 91, 44, 44, 44, 44, 44, 44, 98, 44, 44: 44, 44},
		{107, 45, 45, 45, 5: 45, 7: 105, 106, 108, 109, 45, 45, 112, 45, 114, 115, 116, 117, 45, 45, 103, 45, 100, 102, 97, 94, 45, 91, 45, 45, 45, 45, 45, 45, 98, 45, 44: 45, 45},
		// 75
		{107, 46, 46, 46, 5: 46, 7: 105, 106, 108, 109, 46, 46, 46, 46, 46, 115, 116, 117, 46, 46, 103, 46, 46, 46, 46, 94, 46, 91, 46, 46, 46, 46, 46, 46, 98, 46, 44: 46, 46},
		{107, 47, 47, 47, 5: 47, 7: 105, 106, 108, 109, 47, 47, 112, 47, 114, 115, 116, 117, 47, 47, 103, 47, 100, 102, 97, 94, 47, 91, 47, 47, 47, 47, 101, 47, 98, 47, 44: 47, 47},
		{48, 48, 48, 48, 5: 48, 7: 48, 48, 48, 48, 48, 48, 48, 48, 48, 115, 116, 48, 48, 48, 103, 48, 48, 48, 48, 94, 48, 91, 48, 48, 48, 48, 48, 48, 48, 48, 44: 48, 48},
		{107, 49, 49, 49, 5: 49, 7: 105, 106, 108, 109, 49, 49, 112, 49, 114, 115, 116, 117, 49, 49, 103, 49, 100, 102, 49, 94, 49, 91, 49, 49, 49, 49, 49, 49, 98, 49, 44: 49, 49},
		{107, 50, 50, 50, 5: 50, 7: 105, 106, 108, 109, 50, 50, 112, 50, 114, 115, 116, 117, 118, 88, 103, 93, 100, 102, 97, 94, 104, 91, 50, 50, 89, 50, 101, 50, 98, 99, 44: 50, 50},
		// 80
		{107, 51, 51, 51, 5: 51, 7: 105, 106, 108, 109, 110, 51, 112, 51, 114, 115, 116, 117, 118, 88, 103, 93, 100, 102, 97, 94, 104, 91, 90, 92, 89, 96, 101, 51, 98, 99, 44: 51, 51},
		{52, 52, 52, 52, 5: 52, 7: 52, 52, 52, 52, 52, 52, 52, 52, 52, 115, 116, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 44: 52, 52},
		{107, 53, 53, 53, 5: 53, 7: 105, 106, 108, 109, 53, 53, 112, 53, 114, 115, 116, 117, 118, 88, 103, 53, 100, 102, 97, 94, 104, 91, 53, 53, 53, 53, 101, 53, 98, 99, 44: 53, 53},
		{107, 54, 54, 54, 5: 54, 7: 105, 106, 108, 109, 54, 54, 112, 54, 114, 115, 116, 117, 118, 88, 103, 93, 100, 102, 97, 94, 104, 91, 90, 54, 89, 96, 101, 54, 98, 99, 44: 54, 54},
		{55, 55, 55, 55, 5: 55, 7: 55, 55, 55, 55, 55, 55, 55, 55, 55, 115, 116, 55, 55, 55, 55, 55, 55, 55, 55, 94, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 44: 55, 55},
		// 85
		{107, 56, 56, 56, 5: 56, 7: 105, 106, 108, 109, 56, 56, 112, 56, 114, 115, 116, 117, 118, 88, 103, 93, 100, 102, 97, 94, 104, 91, 56, 56, 89, 96, 101, 56, 98, 99, 44: 56, 56},
		{107, 57, 57, 57, 5: 57, 7: 105, 106, 108, 109, 57, 57, 112, 57, 114, 115, 116, 117, 118, 88, 103, 93, 100, 102, 97, 94, 104, 91, 57, 57, 57, 57, 101, 57, 98, 99, 44: 57, 57},
		{107, 58, 58, 58, 5: 58, 7: 105, 106, 108, 109, 58, 58, 112, 58, 114, 115, 116, 117, 58, 58, 103, 58, 100, 102, 97, 94, 58, 91, 58, 58, 58, 58, 101, 58, 98, 99, 44: 58, 58},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 49: 9, 9, 9},
		{3: 86, 5: 4, 53: 152},
		// 90
		{5: 153},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 49: 13, 13, 13},
		{4: 156, 6: 157, 55: 155},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 49: 19, 19, 19, 158},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 49: 2, 2, 2, 2},
		// 95
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 49: 1, 1, 1, 1},
		{4: 156, 6: 157, 55: 159},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 49: 18, 18, 18},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 49: 22, 22, 22},
		{2: 4, 86, 53: 162},
		// 100
		{2: 163},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 49: 21, 21, 21},
		{107, 7: 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 88, 103, 93, 100, 102, 97, 94, 104, 91, 90, 92, 89, 96, 101, 95, 98, 99, 45: 165},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 49: 23, 23, 23},
		{66, 4: 71, 6: 75, 37: 65, 69, 70, 68, 72, 73, 74, 46: 67, 76, 167},
		// 105
		{107, 25, 25, 25, 5: 25, 7: 105, 106, 108, 109, 25, 25, 112, 25, 114, 115, 116, 117, 118, 88, 103, 25, 100, 102, 97, 94, 104, 91, 25, 25, 25, 25, 101, 25, 98, 99, 44: 25, 25},
		{59, 59, 59, 59, 5: 59, 7: 59, 59, 108, 59, 59, 59, 59, 59, 59, 115, 116, 117, 59, 59, 103, 59, 59, 59, 59, 94, 59, 91, 59, 59, 59, 59, 59, 59, 98, 59, 44: 59, 59},
		{107, 60, 60, 60, 5: 60, 7: 105, 106, 108, 109, 60, 60, 112, 60, 114, 115, 116, 117, 60, 60, 103, 60, 100, 102, 97, 94, 60, 91, 60, 60, 60, 60, 101, 60, 98, 99, 44: 60, 60},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("'%c'", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), __yyfmt__.Sprint(yylex.(*lexer).sdump())+` `+prettyString(lval.Token): %v\n", yySymName(n), n, n, __yyfmt__.Sprint(yylex.(*lexer).sdump())+` `+prettyString(lval.Token))
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 58

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.Node = &start{
				Expression: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 2:
		{
			yyVAL.Node = &Expression{
				Token:      yyS[yypt-1].Token,
				Expression: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 3:
		{
			yyVAL.Node = &Expression{
				Case:       1,
				Token:      yyS[yypt-1].Token,
				Expression: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 4:
		{
			yyVAL.Node = &Expression{
				Case:        2,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 5:
		{
			yyVAL.Node = &Expression{
				Case:        3,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 6:
		{
			yyVAL.Node = &Expression{
				Case:        4,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 7:
		{
			yyVAL.Node = &Expression{
				Case:        5,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 8:
		{
			yyVAL.Node = &Expression{
				Case:        6,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 9:
		{
			yyVAL.Node = &Expression{
				Case:        7,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 10:
		{
			yyVAL.Node = &Expression{
				Case:        8,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 11:
		{
			yyVAL.Node = &Expression{
				Case:        9,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 12:
		{
			yyVAL.Node = &Expression{
				Case:        10,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 13:
		{
			yyVAL.Node = &Expression{
				Case:        11,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 14:
		{
			yyVAL.Node = &Expression{
				Case:        12,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 15:
		{
			yyVAL.Node = &Expression{
				Case:        13,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 16:
		{
			yyVAL.Node = &Expression{
				Case:        14,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 17:
		{
			yyVAL.Node = &Expression{
				Case:        15,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 18:
		{
			yyVAL.Node = &Expression{
				Case:        16,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 19:
		{
			yyVAL.Node = &Expression{
				Case:        17,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 20:
		{
			yyVAL.Node = &Expression{
				Case:        18,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 21:
		{
			yyVAL.Node = &Expression{
				Case:        19,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 22:
		{
			yyVAL.Node = &Expression{
				Case:        20,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 23:
		{
			yyVAL.Node = &Expression{
				Case:        21,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 24:
		{
			yyVAL.Node = &Expression{
				Case:        22,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 25:
		{
			yyVAL.Node = &Expression{
				Case:        23,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 26:
		{
			yyVAL.Node = &Expression{
				Case:        24,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 27:
		{
			yyVAL.Node = &Expression{
				Case:       25,
				Expression: yyS[yypt-1].Node.(*Expression),
				Token:      yyS[yypt-0].Token,
			}
		}
	case 28:
		{
			yyVAL.Node = &Expression{
				Case:        26,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 29:
		{
			yyVAL.Node = &Expression{
				Case:        27,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 30:
		{
			yyVAL.Node = &Expression{
				Case:        28,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 31:
		{
			yyVAL.Node = &Expression{
				Case:        29,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 32:
		{
			yyVAL.Node = &Expression{
				Case:        30,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 33:
		{
			yyVAL.Node = &Expression{
				Case:        31,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 34:
		{
			yyVAL.Node = &Expression{
				Case:        32,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 35:
		{
			yyVAL.Node = &Expression{
				Case:        33,
				Expression:  yyS[yypt-2].Node.(*Expression),
				Token:       yyS[yypt-1].Token,
				Expression2: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 36:
		{
			yyVAL.Node = &Expression{
				Case:   34,
				Factor: yyS[yypt-0].Node.(*Factor),
			}
		}
	case 37:
		{
			yyVAL.Node = &Expression{
				Case:       35,
				Factor:     yyS[yypt-2].Node.(*Factor),
				Token:      yyS[yypt-1].Token,
				Expression: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 38:
		{
			yyVAL.Node = &Term{
				Token: yyS[yypt-0].Token,
			}
		}
	case 39:
		{
			yyVAL.Node = &Term{
				Case:       1,
				Token:      yyS[yypt-2].Token,
				Expression: yyS[yypt-1].Node.(*Expression),
				Token2:     yyS[yypt-0].Token,
			}
		}
	case 40:
		{
			yyVAL.Node = &Term{
				Case:   2,
				Token:  yyS[yypt-1].Token,
				Token2: yyS[yypt-0].Token,
			}
		}
	case 41:
		{
			yyVAL.Node = &Term{
				Case:     3,
				Token:    yyS[yypt-3].Token,
				ExprList: yyS[yypt-2].Node.(*ExprList).reverse(),
				CommaOpt: yyS[yypt-1].Node.(*CommaOpt),
				Token2:   yyS[yypt-0].Token,
			}
		}
	case 42:
		{
			yyVAL.Node = &Term{
				Case:  4,
				Token: yyS[yypt-0].Token,
			}
		}
	case 43:
		{
			yyVAL.Node = &Term{
				Case:   5,
				Token:  yyS[yypt-2].Token,
				Token2: yyS[yypt-1].Token,
				Tag:    yyS[yypt-0].Node.(*Tag),
			}
		}
	case 44:
		{
			yyVAL.Node = &Term{
				Case:   6,
				Token:  yyS[yypt-4].Token,
				Token2: yyS[yypt-3].Token,
				Tag:    yyS[yypt-2].Node.(*Tag),
				Token3: yyS[yypt-1].Token,
				Tag2:   yyS[yypt-0].Node.(*Tag),
			}
		}
	case 45:
		{
			yyVAL.Node = &Term{
				Case:  7,
				Token: yyS[yypt-0].Token,
			}
		}
	case 46:
		{
			yyVAL.Node = &Term{
				Case:  8,
				Token: yyS[yypt-0].Token,
			}
		}
	case 47:
		{
			yyVAL.Node = &Term{
				Case:  9,
				Token: yyS[yypt-0].Token,
			}
		}
	case 48:
		{
			yyVAL.Node = &Term{
				Case:  10,
				Token: yyS[yypt-0].Token,
			}
		}
	case 49:
		{
			yyVAL.Node = &Term{
				Case:     11,
				Term:     yyS[yypt-4].Node.(*Term),
				Token:    yyS[yypt-3].Token,
				ExprList: yyS[yypt-2].Node.(*ExprList).reverse(),
				CommaOpt: yyS[yypt-1].Node.(*CommaOpt),
				Token2:   yyS[yypt-0].Token,
			}
		}
	case 50:
		{
			yyVAL.Node = &Term{
				Case:  12,
				Term:  yyS[yypt-1].Node.(*Term),
				Token: yyS[yypt-0].Token,
			}
		}
	case 51:
		{
			yyVAL.Node = &Term{
				Case:  13,
				Term:  yyS[yypt-1].Node.(*Term),
				Token: yyS[yypt-0].Token,
			}
		}
	case 52:
		{
			yyVAL.Node = &Term{
				Case:   14,
				Term:   yyS[yypt-2].Node.(*Term),
				Token:  yyS[yypt-1].Token,
				Token2: yyS[yypt-0].Token,
			}
		}
	case 53:
		{
			yyVAL.Node = &Term{
				Case:     15,
				Term:     yyS[yypt-4].Node.(*Term),
				Token:    yyS[yypt-3].Token,
				ExprList: yyS[yypt-2].Node.(*ExprList).reverse(),
				CommaOpt: yyS[yypt-1].Node.(*CommaOpt),
				Token2:   yyS[yypt-0].Token,
			}
		}
	case 54:
		{
			yyVAL.Node = &Factor{
				Term: yyS[yypt-0].Node.(*Term),
			}
		}
	case 55:
		{
			yyVAL.Node = &Factor{
				Case:   1,
				Term:   yyS[yypt-1].Node.(*Term),
				Factor: yyS[yypt-0].Node.(*Factor),
			}
		}
	case 56:
		{
			yyVAL.Node = &ExprList{
				Expression: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 57:
		{
			yyVAL.Node = &ExprList{
				Case:       1,
				ExprList:   yyS[yypt-2].Node.(*ExprList),
				Token:      yyS[yypt-1].Token,
				Expression: yyS[yypt-0].Node.(*Expression),
			}
		}
	case 58:
		{
			yyVAL.Node = (*CommaOpt)(nil)
		}
	case 59:
		{
			yyVAL.Node = &CommaOpt{
				Token: yyS[yypt-0].Token,
			}
		}
	case 60:
		{
			yyVAL.Node = &Tag{
				Token: yyS[yypt-0].Token,
			}
		}
	case 61:
		{
			yyVAL.Node = &Tag{
				Case:  1,
				Token: yyS[yypt-0].Token,
			}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
